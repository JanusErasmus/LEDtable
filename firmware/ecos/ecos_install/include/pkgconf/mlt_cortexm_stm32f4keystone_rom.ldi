// eCos memory layout

#include <pkgconf/hal.h>
#include <cyg/infra/cyg_type.inc>

MEMORY
{
    ram   : ORIGIN = 0x20000000, LENGTH = 0x00020000-CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE
    flash : ORIGIN = 0x08000000, LENGTH = 0x00100000
}

hal_vsr_table = 0x20000000;
hal_virtual_vector_table = hal_vsr_table + 85*4;
#if defined(CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT)
hal_virtual_vector_table_end = hal_virtual_vector_table + 64*4;
#else // zero size virtual vector table
hal_virtual_vector_table_end = hal_virtual_vector_table;
#endif

// SRAM is 128k.
hal_startup_stack = 0x20000000 + 1024*128;

SECTIONS
{
    SECTIONS_BEGIN
    SECTION_rom_vectors (flash, CYGNUM_HAL_CORTEXM_STM32_IMAGE_ADDRESS, LMA_EQ_VMA)
    SECTION_RELOCS (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_text (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_fini (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_rodata (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_rodata1 (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_fixup (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_gcc_except_table (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_eh_frame (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_got (flash, ALIGN (0x8), LMA_EQ_VMA)
    SECTION_sram (ram, hal_virtual_vector_table_end, FOLLOWING (.got))
    SECTION_data (ram, ALIGN( 0x8), FOLLOWING (.sram))
    SECTION_bss (ram, ALIGN (0x8), LMA_EQ_VMA)
    CYG_LABEL_DEFN(__heap1) = ALIGN (0x8);
    SECTIONS_END
}
